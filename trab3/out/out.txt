Regra: program -> epsilon 
Regra: parameters -> epsilon 
Regra: type -> KW_INT ===> type -> int | Informacoes: 'int' => (2, 21) 
Regra: parameter -> ID COLON type ===> parameter -> n: type | Informacoes: 'n' => (2, 18), ':' => (2, 19) 
Regra: end_parameters -> epsilon 
Regra: parameters -> parameters parameter end_parameters 
Regra: type -> KW_BOOL ===> type -> bool | Informacoes: 'bool' => (2, 26) 
Regra: block -> epsilon 
Regra: expression -> TRUE ===> expression -> true | Informacoes: 'true' => (4, 15) 
Regra: assignment -> ID ASSIGNMENT expression ===> assignment -> _boolean = expression | Informacoes: '_boolean' => (4, 4), '=' => (4, 13) 
Regra: body -> assignment 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (4, 19) 
Regra: expression -> IDENTIFIER ===> expression -> _boolean | Informacoes: '_boolean' => (5, 11) 
Regra: condition -> expression 
Regra: block -> epsilon 
Regra: expression -> IDENTIFIER ===> expression -> n | Informacoes: 'n' => (6, 12) 
Regra: expression -> INT ===> expression -> 3 | Informacoes: '3' => (6, 17) 
Regra: condition -> expression EQUALS expression ===> condition -> expression == expression | Informacoes: '==' => (6, 14) 
Regra: block -> epsilon 
Regra: expression -> FLOAT ===> expression -> 8.500000 | Informacoes: '8.500000' => (7, 20) 
Regra: expression -> IDENTIFIER ===> expression -> n | Informacoes: 'n' => (7, 26) 
Regra: expression -> expression SUM expression ===> expression -> expression + expression | Informacoes: '+' => (7, 24) 
Regra: assignment -> ID ASSIGNMENT expression ===> assignment -> teste = expression | Informacoes: 'teste' => (7, 12), '=' => (7, 18) 
Regra: body -> assignment 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (7, 27) 
Regra: expression -> FALSE ===> expression -> false | Informacoes: 'false' => (8, 23) 
Regra: assignment -> ID ASSIGNMENT expression ===> assignment -> _boolean = expression | Informacoes: '_boolean' => (8, 12), '=' => (8, 21) 
Regra: body -> assignment 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (8, 28) 
Regra: block -> epsilon 
Regra: expression -> FLOAT ===> expression -> 8.900000 | Informacoes: '8.900000' => (11, 20) 
Regra: expression -> IDENTIFIER ===> expression -> n | Informacoes: 'n' => (11, 27) 
Regra: expression -> expression SUM expression ===> expression -> expression + expression | Informacoes: '+' => (11, 25) 
Regra: assignment -> ID ASSIGNMENT expression ===> assignment -> teste = expression | Informacoes: 'teste' => (11, 12), '=' => (11, 18) 
Regra: body -> assignment 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (11, 28) 
Regra: conditional -> IF LPAR condition RPAR LBRACE block RBRACE ELSE LBRACE block RBRACE ===> conditional -> if (condition) { block } else { block } | Informacoes: 'if' => (6, 8), '(' => (6, 11), ')' => (6, 18), '{' => (6, 20), '}' => (9, 8), 'else' => (10, 8), '{' => (10, 13), '}' => (12, 8) 
Regra: body -> conditional 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (12, 9) 
Regra: loop -> WHILE LPAR condition RPAR LBRACE block RBRACE ===> loop -> while (condition) { block } | Informacoes: 'while' => (5, 4), '(' => (5, 10), ')' => (5, 19), '{' => (5, 21), '}' => (13, 4) 
Regra: body -> loop 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (13, 5) 
Regra: expression -> IDENTIFIER ===> expression -> _boolean | Informacoes: '_boolean' => (14, 11) 
Regra: body -> RETURN expression ===> body -> return expression | Informacoes: 'return' => (14, 4) 
Regra: block -> block body SEMICOLON ===> block -> block body; | Informacoes: ';' => (14, 19) 
Regra: function -> FN IDENTIFIER LPAR parameters RPAR COLON type LBRACE block RBRACE ==> function -> fn nome_de_funcao(parameters):type { block } | Informacoes: 'fn' => (2, 0), 'nome_de_funcao' => (2, 3), '(' => (2, 17), ')' => (2, 24), ':' => (2, 25), '{' => (2, 31), '}' => (15, 0) 
Regra: program_body -> function 
Regra: program -> program program_body SEMICOLON ===> program -> program program_body; | Informacoes: ';' => (15, 1) 
